{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"pr_sc++": {
		"prefix": "pr_sc++",
		"body": [
			"int arg1;",
			"printf(\"Enter arg1\\n\");",
			"scanf(\"%d\", &arg1);"
		],
		"description": "pr_sc++"
	},
	"c": {
		"prefix": "c",
		"body": [
			"#include <stdio.h>",
			"#include <stdlib.h>"
		],
		"description": "c"
	},
	"cpp": {
		"prefix": "cpp",
		"body": [
			"#include <iostream>",
			"#include <stdio.h>",
			"#include <iomanip>",
			"#include <cmath>",
			"#include <ctime>",
			"#include <vector>",
			"#include <string>",
			"",
			"using namespace std;",
			"",
			"int main(int argc, char const *argv[], char *envp[])",
			"{",
			"    /* code */",
			"    return 0;",
			"}",
		],
		"description": "cpp"
	},
	"ccp": {
		"prefix": "ccp",
		"body": [
			"#include <assert.h>",
			"#include <ctype.h>",
			"#include <errno.h>",
			"#include <fenv.h>",
			"#include <float.h>",
			"#include <inttypes.h>",
			"#include <iso646.h>",
			"#include <limits.h>",
			"#include <locale.h>",
			"#include <math.h>",
			"#include <setjmp.h>",
			"#include <signal.h>",
			"#include <stdarg.h>",
			"#include <stdbool.h>",
			"#include <stddef.h>",
			"#include <stdint.h>",
			"#include <stdio.h>",
			"#include <stdlib.h>",
			"#include <string.h>",
			"#include <tgmath.h>",
			"#include <time.h>",
			"#include <uchar.h>",
			"#include <unistd.h>",
			"#include <wchar.h>",
			"#include <wctype.h>",
			"",
			"// LIB FROM $HOME/start/communis/Deploy_store/.qa/main_repo_fn/dir_c_/_c_/_lib",
			"//#include \"lib/dirent_1.h\"",
			"//#include \"lib/fcntl_1.h\"",
			"//#include \"lib/io_1.h\"",
			"//#include \"lib/l3p_1.h\"",
			"//#include \"lib/lc_0.h\"",
			"//#include \"lib/lc_1.h\"",
			"//#include \"lib/lc_in.h\"",
			"//#include \"lib/lc_io.h\"",
			"//#include \"lib/lc_pipe.h\"",
			"//#include \"lib/lc_str.h\"",
			"//#include \"lib/lc_time.h\"",
			"//#include \"lib/lib_1.h\"",
			"//#include \"lib/libgen_1.h\"",
			"//#include \"lib/socket_1.h\"",
			"//#include \"lib/st_mode_1.h\"",
			"//#include \"lib/sys_stat_1.h\"",
			"//#include \"lib/uni_1.h\"",
			"",
			"#include <aio.h>",
			"#include <arpa/inet.h>",
			"#include <net/if.h>",
			"#include <netdb.h>",
			"#include <netinet/in.h>",
			"#include <signal.h>",
			"#include <sys/ipc.h>",
			"#include <sys/mman.h>",
			"#include <sys/msg.h>",
			"#include <sys/resource.h>",
			"#include <sys/select.h>",
			"#include <sys/sem.h>",
			"#include <sys/socket.h>",
			"#include <sys/stat.h>",
			"#include <sys/types.h>",
			"#include <sys/un.h>",
			"#include <sys/wait.h>",
			"",
			"#include <dirent.h>",
			"#include <fcntl.h>",
			"#include <fmtmsg.h>",
			"#include <ftw.h>",
			"#include <getopt.h>",
			"#include <glob.h>",
			"#include <grp.h>",
			"#include <iconv.h>",
			"#include <inttypes.h>",
			"#include <mqueue.h>",
			"#include <poll.h>",
			"#include <pthread.h>",
			"#include <pwd.h>",
			"#include <regex.h>",
			"#include <sched.h>",
			"#include <search.h>",
			"#include <semaphore.h>",
			"#include <signal.h>",
			"#include <spawn.h>",
			"#include <stdarg.h>",
			"#include <stddef.h>",
			"#include <threads.h>",
			"#include <unistd.h>",
			"#include <wchar.h>",
			"#include <wordexp.h>",
			"",
			"#define _XOPEN_SOURCE 500",
			"#define N 7",
			"// #define _GNU_SOURCE",
			"",
			"// while (*envp != NULL)",
			"//     printf(\"  %s\\n\", *(envp++));",
			"",
			"// #define errExit(msg)                                                                                                   \\",
			"//     do                                                                                                                 \\",
			"//     {                                                                                                                  \\",
			"//         perror(msg);                                                                                                   \\",
			"//         exit(EXIT_FAILURE);                                                                                            \\",
			"//     } while (0)",
			"",
			"// _GCC_DB from makefile",
			"/* schema",
			"",
			"main(){",
			"    int a {{side of rect}}",
			"    int b {{side of rect}}",
			"    int perimetr {{perimetr of rect}}",
			"",
			"    perimetr = (a+b)*2",
			"}",
			"",
			"*/",
			"",
			"/*---------------------------------------------------------------------*/",
			"/*-----------------------------------------------------------*/",
			"/*-------------------------------------------------*/",
			"",
			"int main(int argc,     // Number of strings in array argv",
			"         char *argv[], // Array of command-line argument strings",
			"         char **envp)  // Array of environment variable strings",
			"{",
			"    int array[N] = {};",
			"    fill_rand_lc_0_MxV_Ac_Ar(100, N, array);",
			"    pr_int_arr_lc_0_Ac_Ar(N, array);",
			"    printf(\"%d \\n\", is_prime_lc_0_Chint(array[1]));",
			"    return 0;",
			"}",
			"",
			"/*-------------------------------------------------*/",
			"/*-----------------------------------------------------------*/",
			"/*---------------------------------------------------------------------*/",
			"",
			"",
		],
		"description": "ccp"
	},
	"ina": {
		"prefix": "ina",
		"body": [
			"${1:int} ${2:a};",
			"cout << \"Enter ${2:a}(${1:int})\" << endl;",
			"cin >> ${2:a} ;"
		],
		"description": "ina"
	},
	"ccs printf": {
		"prefix": "ccs",
		"body": [
			"printf(\"Enter (1 or 2) a(int)\\n\");",
			"int a;",
			"scanf(\"%d\", &a);  "
		],
		"description": "ccs printf"
	},
	"prc": {
		"prefix": "prc",
		"body": [
			"printf(\"$1\\n\");",
		],
		"description": "printf c"
	},
	"lc_0": {
		"prefix": "lc_0",
		"body": [
			"",
			"// LIB FROM $HOME/start/communis/Deploy_store/.qa/main_repo_fn/dir_c_/_c_/_lib",
			"#include \"lib/lc_0.h\"",
			"#include \"lib/lc_1.h\"",
			"#include \"lib/io_1.h\"",
			"#include \"lib/lib_1.h\"",
			"#include \"lib/uni_1.h\"",
			"",
			"",
		],
		"description": "lc_x"
	},
	"chh": {
		"prefix": "chh",
		"body": [
			"#ifndef ${1:c_file}_h",
			"#define ${1:c_file}_h",
			"",
			"",
			"#endif"
		],
		"description": "chh"
	},
	"__FP": {
		"prefix": "__FP",
		"body": [
			",__FILE__, __LINE__, STMO_PRN, STIF_ONE, STRE_EXI"
		],
		"description": "__FP"
	},
	"__F": {
		"prefix": "__F",
		"body": [
			"__FILE__, __LINE__"
		],
		"description": "__F"
	},
	// "/*#*/-1": {
	// 	"prefix": "/*#*/",
	// 	"body": [
	// 	  "/*#*/ int ${1:fn}_с(char *FFFFF, const char *file, const int line, int st_mode, int st_itfs)",
	// 	  "{",
	// 	  "    DIR *a = ${1:fn}(FFFFF);",
	// 	  "    if (NULL == a)",
	// 	  "    {",
	// 	  "        if (st_mode & ST_PRN)",
	// 	  "        {",
	// 	  "            fprintf(stderr, \"failed in file %s at line # %d\\n with st_mode = %d\", file, line, st_mode);",
	// 	  "            fprintf(stderr, \"from ${1:fn}_с FFFFF = %s, errno = %d\\n\", FFFFF, errno);",
	// 	  "            perror(\"need exit(errno) with\");",
	// 	  "            fflush(stdout);",
	// 	  "        }",
	// 	  "        if (!(st_mode & ST_DEB))",
	// 	  "        {",
	// 	  "            // printf(\"that not_debug section - exit \\n\\n\");",
	// 	  "            exit(errno);",
	// 	  "        }",
	// 	  "    }",
	// 	  "    return a;",
	// 	  "}"
	// 	],
	// 	"description": "/*#*/-1"
	//   },
	"O_x": {
		"prefix": "O_",
		"body": [
			"O_RDWR|O_CREAT, S_IRWXU,"
		],
		"description": "O_x"
	},
}